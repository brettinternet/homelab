---
- name: Check supported distribution
  ansible.builtin.fail:
    msg:
      - "Unsupported distribution: {{ ansible_facts['distribution'] | lower }}"
      - This role only supports Arch Linux
  when: ansible_facts['distribution'] | lower not in dotfiles__supported_distributions

- name: Install packages
  ansible.builtin.package:
    state: present
    name:
      - git
      - neovim
      - tmux
      - zsh
      - bat
      - lsd

- name: Check for 'dotfiles__repo' definition
  ansible.builtin.fail:
    msg:
      - "'dotfiles__repo' must be defined"
  when: dotfiles__repo is not defined

- name: "Setup user groups, set user shell to {{ dotfiles__shell }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    shell: "{{ dotfiles__shell }}"
    append: true
    groups:
      - wheel
      - sudo
      - ssh

- name: Clone dotfiles repo # noqa git-latest
  become_user: "{{ ansible_user }}"
  ansible.builtin.git:
    repo: "{{ dotfiles__repo }}"
    dest: "{{ dotfiles__dir }}"
    accept_hostkey: true
    update: true
    depth: 1

- name: Setup dotfiles with install command # noqa no-changed-when
  become_user: "{{ ansible_user }}"
  ansible.builtin.command:
    chdir: "{{ dotfiles__dir }}"
    cmd: "{{ dotfiles__install_cmd }}"
  register: dotbot_setup_result
  failed_when: dotbot_setup_result.stderr != ""

- name: Debug dotfile setup log
  ansible.builtin.debug:
    msg: "{{ dotbot_setup_result.stdout.split('\n') }}"

- name: Debug dotfile setup errors
  ansible.builtin.debug:
    msg: "{{ dotbot_setup_result.stderr.split('\n') }}"
  when: dotbot_setup_result.stderr | length > 0

- name: Setup system env vars
  when:
    - dotfiles__direnv_lines is defined
    - dotfiles__direnv_lines | length > 0
  block:
    - name: Add private environment values
      become_user: "{{ ansible_user }}"
      ansible.builtin.lineinfile:
        path: "{{ dotfiles__direnv_file }}"
        line: "{{ item }}"
        state: present
      loop: "{{ dotfiles__direnv_lines }}"

    - name: Check dirnev binary exists
      ansible.builtin.stat:
        path: /usr/bin/direnv
      register: direnv_result

    - name: Allow user directory direnv
      become_user: "{{ ansible_user }}"
      ansible.builtin.shell:
        # include .zshrc if it exists since direnv is installed by zinit
        cmd: |
          if [ -f "$HOME/.zshrc" ]; then
            . "$HOME/.zshrc"
          fi
          direnv allow ~
        executable: /bin/zsh
      when: not direnv_result.stat.exists
