---
- name: Setup Linux
  hosts: servers
  become: true
  pre_tasks:
    - name: Check supported distribution
      ansible.builtin.fail:
        msg:
          - "Unsupported distribution: {{ ansible_facts['distribution'] | lower }}"
          - This role only supports Arch Linux
      when: ansible_distribution | lower not in ['archlinux', 'debian']

    - name: Split packages
      ansible.builtin.set_fact:
        packages: "{{ packages.strip().split() if packages is string and packages is defined else packages }}"

    - name: Split aur packages
      ansible.builtin.set_fact:
        aur_packages: "{{ aur_packages.strip().split() if aur_packages is string and aur_packages is defined else aur_packages }}"

    - name: Split aur packages
      ansible.builtin.set_fact:
        remove_packages: "{{ remove_packages.strip().split() if remove_packages is string and remove_packages is defined else remove_packages }}"

    - name: Host vars
      ansible.builtin.debug:
        msg:
          - "Packages: {{ packages }}"

    - name: Install packages
      ansible.builtin.package:
        state: present
        name: "{{ packages }}"
      when:
        - packages | length > 0

    - name: Install AUR packages
      ansible.builtin.include_role:
        name: aur
      vars:
        state: present
        packages: "{{ aur_packages }}"
      when:
        - ansible_distribution | lower == 'archlinux'
        - aur_packages | length > 0

    - name: Combine packages to remove
      ansible.builtin.set_fact:
        remove_packages: "{{ remove_packages | default([]) + remove_aur_packages | default([]) }}"

    - name: Remove packages
      ansible.builtin.package:
        state: absent
        name: "{{ sum_packages_remove }}"
      when:
        - remove_packages | length > 0
  roles:
    - os
    - user
    - ssh
    - role: etckeeper
      # ðŸ¤” https://forum.proxmox.com/threads/using-etckeeper-with-proxmox.93224/
      when: ansible_facts['distribution'] | lower == 'archlinux'
    - role: dotfiles
      vars:
        dotfiles_repo: https://github.com/brettinternet/dotfiles
    - atuin
    - role: supermicro
      when: "'supermicro' in group_names"
    - role: proxmox
      when: "'proxmox' in group_names"

- name: Setup servers
  hosts: servers
  become: true
  roles:
    - role: snapraid
      when: snapraid is true
    - role: mergerfs
      when:
        - mergerfs is true
        - fstab_lines is defined
        - fstab_lines | length > 0
    - role: nfs
      when: nfs__exports is defined
    - role: cockpit
      when: cockpit is true
    - role: docker
      when: docker is true

# TODO: workstations
# setup powertop auto tune service https://wiki.archlinux.org/index.php/Powertop
# add wifi password https://wiki.archlinux.org/title/NetworkManager#Encrypted_Wi-Fi_passwords

# First, setup winrm
# `iex(iwr https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1).Content`
- name: Setup Windows
  hosts: windows
  become: true
  become_method: runas
  become_user: "{{ ansible_user }}"
  vars:
    # ansible_password: "{{ ansible_become_pass }}"
    # ansible_connection: winrm
    # ansible_winrm_server_cert_validation: ignore
    dotfiles_repo: https://github.com/brettinternet/windows
    # Path shortcuts: https://superuser.com/a/217506
    dotfiles_path: '%UserProfile%\dotfiles'
  roles:
    - chocolatey
  post_tasks:
    # Will probably take a few tries...it's slow and times out
    - name: Install packages
      chocolatey.chocolatey.win_chocolatey:
        name: "{{ item.name }}"
        package_params: "{{ item.params | default('') }}"
        state: present
      loop: "{{ packages }}"

    - name: Stat dotfiles repo
      ansible.windows.win_stat:
        path: "{{ dotfiles_path }}"
      register: dotfiles_result

    - name: Log path to dotfiles
      ansible.builtin.debug:
        msg:
          - "Dotfiles: {{ dotfiles_path }}"
          - "Exists? {{ dotfiles_result.stat.exists | default(false) }}"

    - name: Clone dotfiles
      ansible.windows.win_command:
        cmd: "git clone {{ dotfiles_repo }} dotfiles"
        chdir: "%UserProfile%"
      register: git_result
      when:
        - not dotfiles_result.stat.exists | default(false)

    - name: Update dotfiles
      ansible.windows.win_command:
        cmd: git pull origin main
        chdir: "{{ dotfiles_path }}"
      when:
        - dotfiles_result.stat.isdir | default(false)

    # Windows 11 comes with PowerShell Core already
    # https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.3#msi
    # https://github.com/PowerShell/PowerShell/releases/
    # - name: Install PowerShell Core
    #   ansible.windows.win_package:
    #     path: https://github.com/PowerShell/PowerShell/releases/download/v7.3.0/PowerShell-7.3.0-win-x64.msi

    - name: Create PowerShell directory
      ansible.windows.win_file:
        path: '%UserProfile%\Documents\PowerShell'
        state: directory

    # A shortcut or `mklink` doesn't appear to work for Windows Terminal to load the $PROFILE
    - name: Copy PowerShell profile
      ansible.windows.win_copy:
        remote_src: true
        src: '{{ dotfiles_path }}\{{ item }}'
        dest: '%UserProfile%\Documents\PowerShell\{{ item }}'
        force: true
      with_items:
        - Microsoft.PowerShell_profile.ps1

    - name: Create an application shortcut on the desktop
      community.windows.win_shortcut:
        src: '{{ dotfiles_path }}\scripts\{{ item }}'
        dest: '%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\{{ item }}.lnk'
        icon: '{{ dotfiles_path }}\scripts\{{ item }},0'
      with_items:
        - CapsToEsc.ahk

    - name: Stat PowerShell Core program file executable
      ansible.windows.win_stat:
        path: '%ProgramFiles%\PowerShell\7\pwsh.exe'
      register: pscore_exe_result

    - name: Add PowerShellGet
      community.windows.win_psmodule:
        name: PowerShellGet
        state: present

    - name: Install latest PowerShellGet
      ansible.windows.win_powershell:
        script: Install-Module PowerShellGet -Force
        executable: 'C:\Program Files\PowerShell\7\pwsh.exe'
      when: not pscore_exe_result.stat.exists | default(false)

    # Preferred over installing with Chocolatey
    - name: Install posh-git
      ansible.windows.win_powershell:
        script: PowerShellGet\Install-Module posh-git -Scope CurrentUser -AllowPrerelease -Force
        # Path shortcuts don't appear to work here
        executable: 'C:\Program Files\PowerShell\7\pwsh.exe'

    - name: Update posh-git
      ansible.windows.win_powershell:
        script: PowerShellGet\Update-Module post-git
        executable: 'C:\Program Files\PowerShell\7\pwsh.exe'
