---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  ANSIBLE_DIR: "{{.ROOT_DIR}}/ansible"
  DOCKER_DIR: "{{.ROOT_DIR}}/docker"
  SCRIPTS_DIR: "{{.ROOT_DIR}}/scripts"
  AGE_DIR: ~/.config/sops/age
  AGE_FILE: "{{.AGE_DIR}}/keys.txt"
  SOPS_CONFIG_FILE: "{{.ROOT_DIR}}/.sops.yaml"
  PIP_REQUIREMENTS_FILE: "{{.ROOT_DIR}}/requirements.txt"
  PYTHON_BIN: python3

env:
  ROOT_DIR: "{{.ROOT_DIR}}"
  PYTHONDONTWRITEBYTECODE: "1"
  SOPS_AGE_KEY_FILE: "{{.AGE_FILE}}"
  VIRTUAL_ENV: "{{.ROOT_DIR}}/.venv"

includes:
  ansible:
    taskfile: .taskfiles/ansible.yaml
    dir: ./ansible
    aliases: [a]
  docker:
    taskfile: .taskfiles/docker.yaml
    dir: ./docker
    aliases: [d]
  # docker2:
  #   taskfile: .taskfiles/docker2.yaml
  #   dir: ./docker2
  #   aliases: [d2]
  lint: .taskfiles/lint.yaml
  precommit: .taskfiles/precommit.yaml
  setup: .taskfiles/setup_{{OS}}.yaml
  sops: .taskfiles/sops.yaml

tasks:
  default:
    silent: true
    cmds:
      - task -l

  init:
    desc: Install dependencies and setup environment
    cmds:
      - task: setup:init
      - task: precommit:init
      - task: precommit:update
      - task: setup-age
      - task: direnv

  python:
    desc: Install python dependencies
    cmds:
      - |
        ([ "{{.CLI_ARGS}}" == "force" ] || pip -V 2>/dev/null | grep -q .virtualenv) && \
            pip install -r requirements.txt || \
            echo "You may want to activate a python virtual environment before installing the python dependencies.
        Pass 'force' as argument to continue anyway (e.g. task python -- force)."
    silent: true

  setup-age:
    cmds:
      - age-keygen -o age.agekey
      - "mkdir -p {{.AGE_DIR}}"
      - "mv age.agekey {{.AGE_FILE}}"
      - "echo 'Source from .profile: \n\nexport SOPS_AGE_KEY_FILE=~/.config/sops/age/keys.txt'"
    status:
      - "test -f {{.AGE_FILE}}"

  direnv:
    desc: Run direnv hooks
    cmd: direnv allow .
    status:
      - "[[ $(direnv status --json | jq '.state.foundRC.allowed') == 0 ]]"
      - "[[ $(direnv status --json | jq '.state.loadedRC.allowed') == 0 ]]"
