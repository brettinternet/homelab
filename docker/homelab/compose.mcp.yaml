---
# yaml-language-server: $schema=https://raw.githubusercontent.com/docker/cli/master/cli/compose/schema/data/config_schema_v3.13.json
x-options: &options
  profiles: &profiles [mcp]
  networks: [default]
  environment: &environment
    TZ: "${TIMEZONE}"
  deploy: &deploy
    restart_policy:
      condition: unless-stopped

services:
  graphiti-neo4j:
    <<: *options
    image: neo4j:5.26.0
    container_name: graphiti-neo4j
    environment:
      <<: *environment
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${GRAPHITI_NEO4J_PASSWORD}
      NEO4J_server_bolt_listen__address: 0.0.0.0:7687
      NEO4J_server_memory_heap_initial__size: 512m
      NEO4J_server_memory_heap_max__size: 1G
      NEO4J_server_memory_pagecache_size: 512m
      # Configure Neo4j to work behind HTTPS proxy
      NEO4J_dbms_connector_https_enabled: "true"
      NEO4J_dbms_connector_http_enabled: "true"
      NEO4J_dbms_connector_bolt_enabled: "true"
      # Configure Neo4j advertised addresses for browser connections
      NEO4J_server_bolt_advertised__address: bolt.${PRIVATE_DOMAIN}:443
      NEO4J_server_http_advertised__address: neo4j.${PRIVATE_DOMAIN}:443
      NEO4J_dbms_routing_enabled: "true"
      # Enable browser connections
      NEO4J_browser_remote__content__hostname__whitelist: "neo4j.${PRIVATE_DOMAIN},bolt.${PRIVATE_DOMAIN}"
    volumes:
      - "${CONFIG_DIR}/graphiti-neo4j:/data"
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      traefik.enable: "true"

      # HTTP/WebSocket router for Neo4j Browser and WebSocket connections
      traefik.http.routers.graphiti-neo4j.rule: Host(`neo4j.${PRIVATE_DOMAIN}`)
      traefik.http.services.graphiti-neo4j.loadbalancer.server.port: 7474
      traefik.http.routers.graphiti-neo4j.entrypoints: websecure
      traefik.http.routers.graphiti-neo4j.service: graphiti-neo4j

      # Enable WebSocket upgrades and HTTPS forwarding for Neo4j Browser
      traefik.http.routers.graphiti-neo4j.middlewares: neo4j-headers
      traefik.http.middlewares.neo4j-headers.headers.customRequestHeaders.X-Forwarded-Proto: https
      traefik.http.middlewares.neo4j-headers.headers.customRequestHeaders.X-Forwarded-Port: "443"
      traefik.http.middlewares.neo4j-headers.headers.customRequestHeaders.X-Forwarded-For: ""

      # HTTP router for Neo4j Browser WebSocket connections via HTTPS (bolt+s://)
      traefik.http.routers.graphiti-neo4j-bolt-ws.rule: Host(`bolt.${PRIVATE_DOMAIN}`)
      traefik.http.services.graphiti-neo4j-bolt-ws.loadbalancer.server.port: 7687
      traefik.http.routers.graphiti-neo4j-bolt-ws.entrypoints: websecure
      traefik.http.routers.graphiti-neo4j-bolt-ws.service: graphiti-neo4j-bolt-ws
      traefik.http.routers.graphiti-neo4j-bolt-ws.middlewares: neo4j-bolt-ws-headers
      traefik.http.middlewares.neo4j-bolt-ws-headers.headers.customRequestHeaders.X-Forwarded-Proto: https
      traefik.http.middlewares.neo4j-bolt-ws-headers.headers.customRequestHeaders.X-Forwarded-Port: "443"

      # TCP router for Neo4j Bolt protocol (port 7687)
      traefik.tcp.routers.graphiti-neo4j-bolt.rule: HostSNI(`neo4j.${PRIVATE_DOMAIN}`)
      traefik.tcp.services.graphiti-neo4j-bolt.loadbalancer.server.port: 7687
      traefik.tcp.routers.graphiti-neo4j-bolt.entrypoints: bolt
      traefik.tcp.routers.graphiti-neo4j-bolt.tls.passthrough: "true"
      traefik.tcp.routers.graphiti-neo4j-bolt.service: graphiti-neo4j-bolt

  graphiti:
    <<: *options
    image: zepai/knowledge-graph-mcp:latest
    container_name: graphiti
    depends_on: [graphiti-neo4j]
    command: ["uv", "run", "graphiti_mcp_server.py", "--transport", "sse"]
    environment:
      <<: *environment
      NEO4J_URI: bolt://graphiti-neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${GRAPHITI_NEO4J_PASSWORD}
      OPENAI_API_KEY: ${GRAPHITI_OPEN_API_KEY}
      # MODEL_NAME: ${MODEL_NAME}
      SEMAPHORE_LIMIT: ${SEMAPHORE_LIMIT:-10}
      GRAPHITI_TELEMETRY_ENABLED: false
    labels:
      traefik.enable: "true"
      traefik.http.routers.graphiti.rule: Host(`graphiti.${PRIVATE_DOMAIN}`)
      traefik.http.services.graphiti.loadbalancer.server.port: 8000
      traefik.http.routers.graphiti.entrypoints: websecure
