#!/bin/bash

# Forked from: https://wiki.archlinux.org/index.php/Dunst#Using_dunstify_as_volume/brightness_level_indicator
# extends `pactl` with side effects
# Use pulseaudio parse scripts from https://github.com/graysky2/pulseaudio-ctl/blob/master/common/pulseaudio-ctl.in

# For dunstify appname (to manage in settings) and
# stack tags (which work better than replacing IDs: https://github.com/dunst-project/dunst/issues/672#issuecomment-554513535)
NAME=$(basename "$0")

# Arbitrary but unique message id
SINK=$(pacmd list-sinks | awk '/\* index:/{ print $3 }') || "@DEFAULT_SINK@"

# Change the volume using pulseaudio
if [[ "$@" = "mute" || "$@" = "toggle" ]]; then
    pactl set-sink-mute "$SINK" toggle
else
    pactl set-sink-volume "$SINK" "$@"
fi

VOLUME="$(pacmd list-sinks | grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/[%|,]//g')" # number
MUTED="$(pacmd list-sinks | grep -A 15 '* index' | awk '/muted:/{ print $2 }')" # yes | no
MAX_THRESHOLD="100"

# Correct for max threshold
if [ "$VOLUME" -gt "$MAX_THRESHOLD" ]; then
    pactl set-sink-volume "$SINK" "100%"
    VOLUME="100"
fi

VOLUME_CONTROL_APP="pavucontrol"
DEFAULT_ACTION="default"
PAUSE_ACTION="pause"


open_controller () {
    $VOLUME_CONTROL_APP &
    disown
}

pause () {
    playerctl pause
}

handle_action () {
    case "$1" in
        $DEFAULT_ACTION)
            open_controller
            ;;
        $PAUSE_ACTION)
            pause
            ;;
    esac
}

notify () {
    ACTION=$(
        dunstify --action="$DEFAULT_ACTION,Open $VOLUME_CONTROL_APP" \
            --action="$PAUSE_ACTION,Pause" \
            -a "$NAME" -u low \
            -h string:x-dunst-stack-tag:"$NAME" \
            "$@"
    )
    handle_action $ACTION
}

if [[ "$VOLUME" == "0" || "$MUTED" == "yes" ]]; then
    ICON_MUTED="audio-volume-muted"
    notify -i $ICON_MUTED "Volume muted" &
else
    ICON_VOLUME="audio-volume-high"
    THRESHOLD_MEDIUM=66
    THRESHOLD_LOW=33
    if [ "$VOLUME" -lt "$THRESHOLD_LOW" ]; then
        ICON_VOLUME="audio-volume-low"
    elif [ "$VOLUME" -lt "$THRESHOLD_MEDIUM" ]; then
        ICON_VOLUME="audio-volume-medium"
    fi

    notify -i $ICON_VOLUME \
        "Volume: ${VOLUME}%" \
        "$(get-progress-string 10 "<b> </b>" " " $VOLUME)" &

    # Play the volume changed sound
    canberra-gtk-play -i audio-volume-change -d "$NAME" &
fi

PLAYER="spotify"
PLAYER_STATUS=$(playerctl -p "$PLAYER" status)
if [ "$PLAYER_STATUS" = "Playing" ]; then
    notify-spotify &
fi
