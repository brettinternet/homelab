# About tmux options: https://superuser.com/a/759156/741304


# -- General ----------------------------------------

# use C-a, since it's on the home row and easier to hit than C-b
set-option -g prefix C-a
unbind C-a
bind C-a send-prefix

# Keep your finger on ctrl, or don't
bind ^D detach-client

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set-option -g default-terminal screen-256color


# -- Navigation ----------------------------------------

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set-option -g status-keys vi

# Use vi keybindings in copy and choice modes
set-window-option -g mode-keys vi

bind space next-window
bind bspace previous-window
bind enter next-layout

# use vim-like keys for splits and windows
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


# -- Layout ----------------------------------------

# Pane resize in all four directions using vi bindings.
# with shift
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# with alt
bind -r M-h resize-pane -L 20
bind -r M-j resize-pane -D 20
bind -r M-k resize-pane -U 20
bind -r M-l resize-pane -R 20

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind C-o rotate-window

bind + select-layout main-horizontal
bind = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

bind X kill-pane
bind C-X kill-window


# -- Copy  ----------------------------------------

bind [ copy-mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi y send -X copy-pipe "xclip -selection clipboard" # \; send -X clear-selection
# bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip -selection clipboard -i" \; send -X clear-selection
#bind -T copy-mode-vi V send -X rectangle-toggle
bind ] paste-buffer

bind b choose-buffer


# -- System ----------------------------------------

# Easy config reload
bind r source-file ~/.tmux.conf \; display-message "tmux.conf reloaded!"

set-option -g default-terminal "screen-256color"

bind : command-prompt
bind R refresh-client
bind L clear-history

# Bigger history
set-option -g history-limit 10000

set-option -g set-titles on
set-option -g set-titles-string "#T"

# No escape time for vi mode
set-option -sg escape-time 0

# Display numbers timeout with `prefix + q`
set-window-option -g display-panes-time 5000

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Set window notifications
set-window-option -g monitor-activity on
set-option -g visual-activity on

# Mouse
set-option -g mouse on

# Emulate scrolling by sending up and down keys if these commands are running in the pane
tmux_commands_with_legacy_scroll="nano less more man git"

bind-key -T root WheelUpPane \
    if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
            'send -Mt=' \
                    'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                                "send -t= Up" "copy-mode -et="'

                                bind-key -T root WheelDownPane \
                                    if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
                                            'send -Mt=' \
                                                    'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                                                                "send -t= Down" "send -Mt="'


# -- Source ----------------------------------------

# Local config
if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'


# -- Colorscheme ----------------------------------------

# Forked: https://github.com/egel/tmux-gruvbox
# view colours: for i in {0..255}; do printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" $i ; if ! (( ($i + 1 ) % 8 )); then echo ; fi ; done
# https://jonasjacek.github.io/colors/
set-option -g status "on"

# default statusbar color
set-option -g status-style bg=colour237,fg=colour223 # bg=bg1, fg=fg1

# default window title colors
set-window-option -g window-status-style bg=colour214,fg=colour237 # bg=yellow, fg=bg1

# default window with an activity alert
set-window-option -g window-status-activity-style bg=colour237,fg=colour248 # bg=bg1, fg=fg3

# active window title colors
set-window-option -g window-status-current-style bg=red,fg=colour237 # fg=bg1

# pane border
set-option -g pane-active-border-style fg=colour250 #fg2
set-option -g pane-border-style fg=colour237 #bg1

# message infos
set-option -g message-style bg=colour109,fg=colour237 # bg=bg2

# writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# pane number display
set-option -g display-panes-active-colour colour214 #yellow
set-option -g display-panes-colour colour248 #fg3

# clock
set-window-option -g clock-mode-colour colour109 #blue

# bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

## Theme settings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g status-justify "left"
set-option -g status-left-style none
set-option -g status-left-length "80"
set-option -g status-right-style none
set-option -g status-right-length "80"
set-window-option -g window-status-separator ""

set-option -g status-left "#[fg=colour248, bg=colour241] #S #[fg=colour241, bg=colour237, nobold, noitalics, nounderscore]"
set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]#[fg=colour246,bg=colour239] %Y-%m-%d  %H:%M #[fg=colour248, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour237, bg=colour248] #h "

set-window-option -g window-status-current-format "#[fg=colour237, bg=colour214, nobold, noitalics, nounderscore]#[fg=colour239, bg=colour214] #I #[fg=colour239, bg=colour214, bold] #W #[fg=colour214, bg=colour237, nobold, noitalics, nounderscore]"
set-window-option -g window-status-format "#[fg=colour237,bg=colour239,noitalics]#[fg=colour223,bg=colour239] #I #[fg=colour223, bg=colour239] #W #[fg=colour239, bg=colour237, noitalics]"

